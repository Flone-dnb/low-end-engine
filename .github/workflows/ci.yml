name: All

on: [push, pull_request, pull_request_review]

jobs:
  shader-formatter:
    name: Run shader-formatter
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Run shader-formatter
        run: |
          cd .github/scripts/run_shader_formatter_on_source/
          go run . ../../../res/engine/shaders
  doxygen:
    name: Run doxygen
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          choco install doxygen.install
          Copy "C:\Program Files\doxygen\bin\doxygen.exe" "C:\ProgramData\Chocolatey\bin\doxygen.exe"
          Import-Module $env:ChocolateyInstall\helpers\chocolateyProfile.psm1
          refreshenv
          echo "Installed doxygen of version $(doxygen -v)."
      - name: Run doxygen
        run: |
          cd docs
          doxygen
  build-windows:
    name: Build on Windows
    runs-on: windows-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Pull submodules
      run: git submodule update --init --recursive
    - name: Install dependencies
      run: |
        choco install ninja
        Import-Module $env:ChocolateyInstall\helpers\chocolateyProfile.psm1
        refreshenv
        cmake --version
        clang --version
    - name: Create build directory
      run: mkdir build
    - name: Build (RelWithDebInfo)
      run: |
        cmake -G "Visual Studio 17 2022" -DCMAKE_BUILD_TYPE=RelWithDebInfo ..
        cmake --build . --config RelWithDebInfo
      working-directory: build
    - name: Build (Release)
      run: |
        cmake -G "Visual Studio 17 2022" -DCMAKE_BUILD_TYPE=Release ..
        cmake --build . --config Release
      working-directory: build
    - name: Build (RelWithDebInfo) UI only
      run: |
        cmake -G "Visual Studio 17 2022" -DCMAKE_BUILD_TYPE=RelWithDebInfo -DENGINE_UI_ONLY=ON ..
        cmake --build . --config RelWithDebInfo
      working-directory: build
    - name: Build (Release) UI only
      run: |
        cmake -G "Visual Studio 17 2022" -DCMAKE_BUILD_TYPE=Release -DENGINE_UI_ONLY=ON ..
        cmake --build . --config Release
      working-directory: build
    - name: Compile a new project with engine
      run: |
        git clone https://github.com/Flone-dnb/low-end-engine-project-manager
        ren low-end-engine-project-manager man
        cd man
        python project_manager.py --new proj
        cd proj
        mkdir build
        cd build
        cmake -G "Visual Studio 17 2022" -DCMAKE_BUILD_TYPE=RelWithDebInfo ..
        cmake --build . --config RelWithDebInfo --target proj
  build-linux-clang:
    name: Build on Linux using Clang
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Pull submodules
      run: git submodule update --init --recursive
    - name: Install dependencies
      run: |
        sudo apt install -y ninja-build libflac-dev libvorbis-dev
    - name: Create build directory
      run: mkdir build
    - name: Build (RelWithDebInfo)
      run: |
        CC=clang CXX=clang++ cmake -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo ..
        cmake --build . --config RelWithDebInfo
      working-directory: build
    - name: Build (Release)
      run: |
        CC=clang CXX=clang++ cmake -G Ninja -DCMAKE_BUILD_TYPE=Release ..
        cmake --build . --config Release
      working-directory: build
  build-linux-gcc:
    name: Build on Linux using GCC
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Pull submodules
      run: git submodule update --init --recursive
    - name: Install dependencies
      run: |
        sudo apt install -y ninja-build libflac-dev libvorbis-dev
    - name: Create build directory
      run: mkdir build
    - name: Build (RelWithDebInfo)
      run: |
        CC=gcc CXX=g++ cmake -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo ..
        cmake --build . --config RelWithDebInfo
      working-directory: build
    - name: Build (Release)
      run: |
        CC=gcc CXX=g++ cmake -G Ninja -DCMAKE_BUILD_TYPE=Release ..
        cmake --build . --config Release
      working-directory: build


